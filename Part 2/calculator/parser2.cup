/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            PLUS, LPAREN, RPAREN, COMMA;
terminal String     STRING_LITERAL, NAME;

/*  Non terminals */
non terminal            program;
non terminal String    	exp, func_def, func_content, func_call, args, args_tail, var_lit_call;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */

/**
 *  The Grammar Rules
 */

program ::= exp:e {:
			System.out.println("import java.lang.Math;\n");
			System.out.println("public class Main {");
			System.out.println("\tpublic static void main(String[] args) {");
			System.out.printf("%s", e);
			System.out.println("\t}");
			System.out.println("}");
		:}
	;

exp ::= func_call:f exp:e		{: RESULT = String.format("%s\n%s", f, e); :}
	;

func_call ::= NAME:n LPAREN args:a RPAREN	{: RESULT = String.format("%s(%s)", n, a); :}
			;

args ::= var_lit_call:s args_tail:t	{: RESULT = String.format("%s%s", s, t); :}
	|								{: RESULT = ""; :}
	;

args_tail ::= COMMA var_lit_call:s args_tail:t	{: RESULT = String.format(" ,%s%s", s, t); :}
			|									{: RESULT = ""; :}
			;

var_lit_call ::= var_lit:s	{: RESULT = String.format("%s", s); :}
		| func_call:s		{: RESULT = String.format("%s", s); :}
		;

var_lit ::= NAME:n			{: RESULT = String.format("%s", n); :}
		| STRING_LITERAL:s	{: RESULT = String.format("%s", s); :}
		;
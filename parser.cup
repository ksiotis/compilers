
/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            L_PARENTHESIS, R_PARENTHESIS, R_BRACKET, COMMA, PLUS, IF, ELSE, SUFFIX, PREFIX, WORD_LITERAL, R_PAREN_L_BRACKET, SEMI;
terminal String     STRING_LITERAL;

/*  Non terminals */
non terminal String     exp, function_definition, argument, argument2, word_or_string, function_definition_content, concat, concat2, function_call,
                        function_call_content, function_call_content2, condition_content, logical, condition, prog; 
/**
 *  Precedence Declarations
 */
precedence left IF; 
precedence left PLUS;
precedence left COMMA;

/**
 *  The Grammar Rules
 */

prog ::= exp:e  {:  System.out.println("import java.lang.Math;\n");
                    System.out.println("public class Main {");
                    System.out.println("\tpublic static void main(String[] args) {");
                    System.out.printf("%s", e);
                    System.out.println("\t}");
                    System.out.println("}");
                :};

exp ::=  function_call:fc exp:e     {: RESULT = String.format("\t\t%s %s;\n", fc, e); :}
    | function_definition:fd exp:e  {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", fd, e); :}
    | /*ε*/                         {: RESULT = ""; :}
    ;

function_definition ::= WORD_LITERAL L_PARENTHESIS argument:a R_PAREN_L_BRACKET function_definition_content:fdc R_BRACKET 

    ;

argument ::= WORD_LITERAL argument2:a2
    | /*ε*/
    ;

argument2 ::= COMMA WORD_LITERAL argument2:a2
    | /*ε*/
    ;

word_or_string ::= STRING_LITERAL
    | WORD_LITERAL
    ;

function_definition_content ::= word_or_string:woc
    | concat:conc
    | function_call:fc
    | condition:cond
    ;

concat  ::= word_or_string:woc1 PLUS word_or_string:woc2 concat2:conc;

concat2 ::= PLUS word_or_string:woc concat2:conc2
    | /*ε*/
    ;

function_call ::= WORD_LITERAL L_PARENTHESIS function_call_content:fcc R_PARENTHESIS;

function_call_content ::= word_or_string:woc function_call_content2:fc2
    | function_call:fc function_call_content2:fcc2
    | /*ε*/
    ;

function_call_content2 ::= COMMA word_or_string:woc function_call_content2:fcc2
    | COMMA function_call:fc function_call_content2:fcc2
    | /*ε*/
    ;

condition ::= IF L_PARENTHESIS logical:l R_PARENTHESIS condition_content:cond_cont1 ELSE condition_content:cond_cont2;

condition_content ::= word_or_string:woc
    | condition:cond
    | function_call:fc
    | concat:conc
    ;

logical ::= word_or_string:woc1 PREFIX word_or_string:woc2
    | word_or_string:woc1 SUFFIX word_or_string:woc2
    ;